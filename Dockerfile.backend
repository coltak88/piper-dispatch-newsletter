# Backend API Dockerfile
FROM node:18-alpine AS backend-builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ curl

# Copy package files
COPY package*.json ./

# Install production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Build the application
RUN npm run build:backend

# Production stage
FROM node:18-alpine AS backend

# Create app directory
WORKDIR /app

# Install security updates and curl for health checks
RUN apk add --no-cache curl dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S piper -u 1001 -G nodejs

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=backend-builder --chown=piper:nodejs /app/dist ./dist
COPY --from=backend-builder --chown=piper:nodejs /app/src ./src
COPY --from=backend-builder --chown=piper:nodejs /app/config ./config

# Create necessary directories
RUN mkdir -p logs uploads && \
    chown -R piper:nodejs logs uploads

# Switch to non-root user
USER piper

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:3001/api/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/server.js"]