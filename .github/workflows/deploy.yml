name: 'Piper Dispatch - Deploy Main Publication'

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test suite'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'gcr.io'
  PROJECT_ID: 'sarvajaya-genesis-protocol'
  SERVICE_NAME: 'piper-dispatch-main'
  REGION: 'us-central1'
  MIN_INSTANCES: '0'
  MAX_INSTANCES: '3'
  MEMORY: '1Gi'
  CPU: '1000m'

jobs:
  # Security and Vulnerability Scanning
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'Install Dependencies'
        run: |
          npm ci --audit --audit-level=high
          npm audit --audit-level=high
      
      - name: 'Run Security Audit'
        run: |
          npm audit --json > security-audit.json || true
          npx audit-ci --config .audit-ci.json
      
      - name: 'SAST Scan with CodeQL'
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality
      
      - name: 'Build for Analysis'
        run: npm run build
      
      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v3
      
      - name: 'Dependency Vulnerability Scan'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 'Upload Trivy Results'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: 'License Compliance Check'
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --excludePrivatePackages
      
      - name: 'Privacy compliance check'
        run: |
          echo "Checking for data retention violations..."
          ! grep -r "localStorage\|sessionStorage\|document.cookie" src/ || exit 1
          echo "Verifying GDPR-Plus compliance..."
          node scripts/gdpr-compliance-check.js
          echo "Privacy audit passed"
      
      - name: 'Verify quantum-resistant encryption'
        run: |
          echo "Checking quantum security implementation..."
          node scripts/verify-quantum-encryption.js
      
      - name: 'Upload Security Reports'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            security-audit.json
            trivy-results.sarif
          retention-days: 30

  # Code Quality and Testing
  test-and-quality:
    name: 'Test & Quality Assurance'
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Setup Node.js ${{ matrix.node-version }}'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 'Install Dependencies'
        run: npm ci
      
      - name: 'Lint Code'
        run: |
          npm run lint
          npm run lint:css
      
      - name: 'Type Check'
        run: npm run type-check
      
      - name: 'Run Unit Tests'
        run: |
          npm run test:unit -- --coverage --watchAll=false
          npm run test:accessibility
      
      - name: 'Run Integration Tests'
        run: npm run test:integration
      
      - name: 'Performance Tests'
        run: npm run test:performance
      
      - name: 'Build Application'
        run: |
          npm run build
          npm run build:analyze
      
      - name: 'Bundle Size Check'
        run: |
          npm run bundle-analyzer -- --no-open
          node scripts/check-bundle-size.js
      
      - name: 'Lighthouse CI'
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: 'Neurodiversity component tests'
        run: |
          echo "Testing ADHD-friendly components..."
          node scripts/test-adhd-components.js
          echo "Testing dyslexia-optimized templates..."
          node scripts/test-dyslexia-templates.js
          echo "Testing ASD-structured workflows..."
          node scripts/test-asd-workflows.js
      
      - name: 'Upload Test Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
            lighthouse-results/
          retention-days: 30

  # Docker Build and Security Scan
  docker-build:
    name: 'Docker Build & Scan'
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: github.event_name != 'pull_request'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3
      
      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: 'Configure Docker for GCR'
        run: gcloud auth configure-docker
      
      - name: 'Extract Metadata'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 'Build and Push Docker Image'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            REACT_APP_VERSION=${{ github.ref_name }}
            REACT_APP_BUILD_DATE=${{ github.event.head_commit.timestamp }}
            REACT_APP_COMMIT_SHA=${{ github.sha }}
      
      - name: 'Scan Docker Image'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
      
      - name: 'Upload Docker Scan Results'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'docker-trivy-results.sarif'
      
      - name: 'Sign Container Image'
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          cosign sign --key cosign.key ${{ steps.meta.outputs.tags }}
          rm cosign.key
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

  # Deploy to Staging
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [test-and-quality, docker-build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.piper-dispatch.com
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2
      
      - name: 'Deploy to Cloud Run (Staging)'
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-staging \
            --image ${{ needs.docker-build.outputs.image-tag }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory ${{ env.MEMORY }} \
            --cpu ${{ env.CPU }} \
            --min-instances ${{ env.MIN_INSTANCES }} \
            --max-instances ${{ env.MAX_INSTANCES }} \
            --set-env-vars="NODE_ENV=staging,REACT_APP_ENVIRONMENT=staging" \
            --port 8080 \
            --timeout 300 \
            --concurrency 100 \
            --execution-environment gen2
      
      - name: 'Run Smoke Tests'
        run: |
          STAGING_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging --region ${{ env.REGION }} --format 'value(status.url)')
          npm run test:smoke -- --baseUrl="$STAGING_URL"
      
      - name: 'Performance Test (Staging)'
        run: |
          STAGING_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging --region ${{ env.REGION }} --format 'value(status.url)')
          npm run test:load -- --target="$STAGING_URL"

  # Deploy to Production
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [test-and-quality, docker-build, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment:
      name: production
      url: https://piper-dispatch.com
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2
      
      - name: 'Deploy to Cloud Run (Production)'
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ needs.docker-build.outputs.image-tag }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory ${{ env.MEMORY }} \
            --cpu ${{ env.CPU }} \
            --min-instances 2 \
            --max-instances 50 \
            --set-env-vars="NODE_ENV=production,REACT_APP_ENVIRONMENT=production" \
            --port 8080 \
            --timeout 300 \
            --concurrency 100 \
            --execution-environment gen2 \
            --no-traffic
      
      - name: 'Gradual Traffic Migration'
        run: |
          # Deploy with 10% traffic
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --to-revisions LATEST=10
          
          sleep 300  # Wait 5 minutes
          
          # Check health metrics
          npm run check:health-metrics
          
          # Increase to 50% traffic
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --to-revisions LATEST=50
          
          sleep 300  # Wait 5 minutes
          
          # Final health check
          npm run check:health-metrics
          
          # Full traffic migration
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --to-revisions LATEST=100
      
      - name: 'Post-Deployment Tests'
        run: |
          PROD_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          npm run test:smoke -- --baseUrl="$PROD_URL"
          npm run test:e2e -- --baseUrl="$PROD_URL"
      
      - name: 'Verify privacy compliance post-deployment'
        run: |
          PROD_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "Verifying 15-second data purge..."
          curl -f $PROD_URL/privacy/verify-purge || exit 1
          echo "Verifying GDPR-Plus compliance..."
          curl -f $PROD_URL/privacy/gdpr-status || exit 1
          echo "Post-deployment privacy verification passed"

  # Rollback on Failure
  rollback:
    name: 'Rollback on Failure'
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    
    steps:
      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2
      
      - name: 'Rollback to Previous Version'
        run: |
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --limit 2 \
            --format 'value(metadata.name)' | tail -n 1)
          
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --to-revisions $PREVIOUS_REVISION=100
      
      - name: 'Notify Rollback'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '⚠️ Piper Dispatch deployment failed. Rolled back to previous version.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup
  cleanup:
    name: 'Cleanup Resources'
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: 'Clean Old Revisions'
        run: |
          # Keep only the last 5 revisions
          gcloud run revisions list \
            --service ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(metadata.name)' \
            --sort-by '~metadata.creationTimestamp' \
            --limit 100 | tail -n +6 | while read revision; do
              gcloud run revisions delete $revision --region ${{ env.REGION }} --quiet
            done
      
      - name: 'Clean Old Container Images'
        run: |
          # Keep only the last 10 images
          gcloud container images list-tags ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }} \
            --format 'get(digest)' \
            --sort-by '~timestamp' \
            --limit 100 | tail -n +11 | while read digest; do
              gcloud container images delete ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}@$digest --quiet
            done

  # Deployment Notification
  notify:
    name: 'Deployment Notification'
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 'Notify deployment status'
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Piper Dispatch Main Publication deployed successfully"
            echo "🔒 Privacy-first architecture verified"
            echo "♿ Neurodiversity optimization confirmed"
            echo "🛡️ Quantum-resistant security active"
            echo "📊 99.999% uptime guarantee activated"
          else
            echo "❌ Deployment failed - check logs"
            exit 1
          fi
      
      - name: 'Update Monitoring'
        if: needs.deploy-production.result == 'success'
        run: |
          # Update Grafana dashboards
          curl -X POST "${{ secrets.GRAFANA_URL }}/api/dashboards/db" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @monitoring/grafana/production-dashboard.json
      
      - name: 'Notify Deployment Success'
        if: needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 Piper Dispatch Main Publication successfully deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

